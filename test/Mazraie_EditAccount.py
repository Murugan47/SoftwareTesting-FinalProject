# Name: Nezar Mazraie
# Date: April 9th 2025
# File: Mazraie_Edit CustomerID.py
# Description: This will go through the manager side of the website and test each input field, and the final submit button
# It will test every input box for invalid and valid inputs. If it throws a valid error the program succeeds, if not the
# website will need some adjustments

# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.edge.service import Service

# Correct path to EdgeDriver
driver_path = r"C:\Users\Nezar\Downloads\driveredge\msedgedriver.exe"

# Use Service class to specify driver path
service = Service(driver_path)
driver = webdriver.Edge(service=service)

class TestEditCustomer:
    def setup_method(self, method):
        # Correct path to EdgeDriver
        driver_path = r"C:\Users\Nezar\Downloads\driveredge\msedgedriver.exe"
        self.service = Service(driver_path)
        self.driver = webdriver.Edge(service=self.service)
        self.driver.implicitly_wait(10)
        self.base_url = "https://demo.guru99.com/V4/manager/EditCustomer.php"

    def teardown_method(self, method):
        if self.driver:
            self.driver.quit()

    def test_EditAccount(self):
        self.driver.get("https://demo.guru99.com/V4/index.php")
        self.driver.set_window_size(1536, 920)
        self.driver.find_element(By.NAME, "uid").click()
        self.driver.find_element(By.NAME, "uid").send_keys("mngr619279")
        self.driver.find_element(By.NAME, "password").click()
        self.driver.find_element(By.NAME, "password").send_keys("yzatyva")
        self.driver.find_element(By.NAME, "btnLogin").click()
        self.driver.find_element(By.LINK_TEXT, "Edit Account").click()

        # Testing blank inputs, and asserting the error message to make sure it can account for no inputs
        # Passes Expected Result
        self.driver.find_element(By.NAME, "accountno").click()
        self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(7) > div").click()
        message = self.driver.find_element(By.XPATH, '//*[@id="message2"]').text
        assert message == "Account Number must not be blank"
        time.sleep(1)

        # Testing non-numeric values, and asserting the error message to make sure it can account for non-numeric values
        # Passes Expected Result
        self.driver.find_element(By.NAME, "accountno").click()
        self.driver.find_element(By.NAME, "accountno").send_keys("abc123")
        self.driver.find_element(By.CSS_SELECTOR, "tbody:nth-child(2) > tr > td").click()
        message = self.driver.find_element(By.XPATH, '//*[@id="message2"]').text
        assert message == "Characters are not allowed"
        time.sleep(1)

        # Testing special values, and asserting the error message to make sure it can account for special values
        # Passes Expected Result
        self.driver.find_element(By.NAME, "res").click()
        self.driver.find_element(By.NAME, "accountno").click()
        self.driver.find_element(By.NAME, "accountno").send_keys("!@#$")
        self.driver.find_element(By.CSS_SELECTOR, "tbody:nth-child(2) > tr > td").click()
        message = self.driver.find_element(By.XPATH, '//*[@id="message2"]').text
        assert message == "Special characters are not allowed"
        time.sleep(1)

        # Testing for first character to not have a space, and asserting the error message to make sure it can account for this error
        # Fails Expected Result, First character cannot have a space
        # Actual Result, Characters are not allowed
        self.driver.find_element(By.NAME, "res").click()
        self.driver.find_element(By.NAME, "accountno").click()
        self.driver.find_element(By.NAME, "accountno").send_keys(" ")
        self.driver.find_element(By.CSS_SELECTOR, "td > p:nth-child(2)").click()
        message = self.driver.find_element(By.XPATH, '//*[@id="message2"]').text
        try:
            assert message == "First character cannot have a space"
        except AssertionError as e:
            print(f"Assertion failed: {e}")
            print(f"Expected 'First character cannot have a space', but got: {message}")
        time.sleep(1)

        # Testing the account number to see if it has a space, asserts the error message to make sure it can account for this error
        # Passes Expected Result
        self.driver.find_element(By.NAME, "res").click()
        self.driver.find_element(By.NAME, "accountno").click()
        self.driver.find_element(By.NAME, "accountno").send_keys("123 123")
        self.driver.find_element(By.CSS_SELECTOR, "td > p:nth-child(2)").click()
        message = self.driver.find_element(By.XPATH, '//*[@id="message2"]').text
        assert message == "Characters are not allowed"
        time.sleep(1)

        # Testing for a valid customer ID input, and if successfull should redirect to the edit webpage
        # Failed expected result, redirecting to the edit page
        # Actual results, the website throws an error, which is a HTTP Error 500
        self.driver.find_element(By.NAME, "res").click()
        self.driver.find_element(By.NAME, "accountno").click()
        self.driver.find_element(By.NAME, "accountno").send_keys("143849")
        message = self.driver.find_element(By.XPATH, '//*[@id="message2"]').text
        try:
            assert message == "Login done successfully"
            print("Login done successfully")
        except AssertionError as e:
            print("Login failed")
            print(f"Expected 'Login done successfully', but got HTTP Error 500")
        self.driver.find_element(By.NAME, "AccSubmit").click()
        time.sleep(1)

        # Testing to see if the website will spit an alert to the user if they input an invalid Customer ID
        # Passes Expected Results
        self.driver.get("https://demo.guru99.com/V4/manager/editAccount.php")
        self.driver.find_element(By.NAME, "res").click()
        self.driver.find_element(By.NAME, "accountno").click()
        self.driver.find_element(By.NAME, "accountno").send_keys("4444444")
        self.driver.find_element(By.NAME, "AccSubmit").click()
        time.sleep(2)